#include "filter_one.h"

Filter_One::Filter_One()
{
    L_nStatus=0;
    H_nStatus=0;
}
void Filter_One::LowFilter(int8_t *pTempData)
{
        static float f_Para256[ ][6] =
        {
            {
                0,0,1,0,0
            },
            {
                1.5208,0.6152,0.0236,0.0472,0.0236   //15hz
            },
            {
                1.0360,0.3681,0.0830,0.1661,0.0830,//30hz
            },
            {
                0.7297,0.2673,0.1344,0.2688,0.1344,     //40
            }
        };
        {

                        LOFF[2] = LOFF[1] ;
                        LOFF[1] = LOFF[0] ;
                        LOFF[5] = LOFF[4] ;
                        LOFF[4] = LOFF[3] ;
                        LOFF[3] = (float) (*(pTempData ));

                        LOFF[0] =
                                LOFF[1]*f_Para256[L_nStatus][0] -
                                LOFF[2]*f_Para256[L_nStatus][1] +
                                LOFF[3]*f_Para256[L_nStatus][2] +
                                LOFF[4]*f_Para256[L_nStatus][3] +
                                LOFF[5]*f_Para256[L_nStatus][4] ;

                        *(pTempData ) = (int) LOFF[0] ;
        }

}
void Filter_One::HigtFilter(int8_t *pTempData)   //0.2s
{
        static float g_ParaHif[ ][6] =
        {
            {
                0,0,1,0,0
            },
            {
                1.9733,0.9737,0.9867,1.9735,0.9867   //0.1
            },
            {
                1.9871,0.9872,0.9936,1.9872,0.9936
                //0.2
            },
            {
                1.9906,0.9907,0.9953,1.9906,0.9953
               //0.3
            }
        };
        {
                HIFF[2] = HIFF[1] ;
                HIFF[1] = HIFF[0] ;
                HIFF[5] = HIFF[4] ;
                HIFF[4] = HIFF[3] ;
                HIFF[3] = (float) (*(pTempData )) ;

                HIFF[0] =
                        HIFF[1]*g_ParaHif[H_nStatus][0] -
                        HIFF[2]*g_ParaHif[H_nStatus][1] +
                        HIFF[3]*g_ParaHif[H_nStatus][2] -
                        HIFF[4]*g_ParaHif[H_nStatus][3] +
                        HIFF[5]*g_ParaHif[H_nStatus][4] ;

                *(pTempData ) = (int) (HIFF[0]) ;//+128.
        }
}


void Filter_One::Notch_50Hz(int8_t *dData)
{
    static double x[287];
   {
        static float g_f50HZRatio[]= {0.00053181f, -5.8024e-005f, -0.00057301f, -0.00032453f, 0.00034068f, 0.00052983f, 2.5966e-005f, -0.00046024f,
                                      -0.00030919f, 0.00019598f, 0.00036012f, 5.9559e-005f, -0.00020536f, -0.00012871f, 2.9188e-005f, -1.4365e-017f, -3.1392e-005f, 0.00014889f, 0.00025552f,
                                      -7.9722e-005f, -0.00051864f, -0.00030375f, 0.00051584f, 0.00082681f, -5.0246e-005f, -0.0011048f, -0.00076585f, 0.00078689f, 0.0014994f, 0.00016396f,
                                      -0.001624f, -0.0013545f, 0.00086754f, 0.0021255f, 0.00054298f, -0.0019327f, -0.001931f, 0.0007177f, 0.0025252f, 0.00098374f, -0.0019253f, -0.0023025f,
                                      0.00038246f, 0.0025354f, 0.0013086f, -0.0015777f, -0.0022682f, -4.7026e-018f, 0.0020648f, 0.0013031f, -0.00097392f, -0.0016809f, -0.00022194f, 0.0011384f,
                                      0.00077714f, -0.0003013f, -0.00050634f, -6.0525e-005f, -8.5936e-005f, -0.0003645f, 0.00019058f, 0.0011379f, 0.00064733f, -0.0013395f, -0.0020633f,
                                      0.00026233f, 0.0029818f, 0.0019294f, -0.0023056f, -0.0040809f, -0.00022828f, 0.0046482f, 0.0036253f, -0.0027109f, -0.00602f, -0.0012487f, 0.0057399f,
                                      0.005378f, -0.0024233f, -0.0073972f, -0.002549f, 0.0059504f, 0.0066807f, -0.0015289f, -0.0077546f, -0.0036742f, 0.0051703f, 0.0069766f, -0.00036064f,
                                      -0.0067872f, -0.0040377f, 0.0035584f, 0.0057934f, 0.00053706f, -0.0044522f, -0.0030473f, 0.0015531f, 0.0028805f, 0.00050916f, -0.0010282f, -0.00025607f,
                                      -0.0001906f, -0.001686f, -0.0010614f, 0.0028979f, 0.0044961f, -0.00092909f, -0.0074634f, -0.0045899f, 0.0065239f, 0.01099f, -3.3095e-017f, -0.013686f,
                                      -0.010151f, 0.0089889f, 0.018615f, 0.0030054f, -0.019392f, -0.017406f, 0.0095624f, 0.02644f, 0.0081104f, -0.023602f, -0.025611f, 0.0078212f, 0.033376f,
                                      0.014898f, -0.025531f, -0.033733f, 0.0037707f, 0.038378f, 0.022553f, -0.024756f, -0.040622f, -0.002123f, 0.040658f, 0.029997f, -0.021328f, -0.045241f,
                                      -0.0090017f, 0.039848f, 0.036088f, -0.015774f, 0.95297f, -0.015774f, 0.036088f, 0.039848f, -0.0090017f, -0.045241f, -0.021328f, 0.029997f, 0.040658f,
                                      -0.002123f, -0.040622f, -0.024756f, 0.022553f, 0.038378f, 0.0037707f, -0.033733f, -0.025531f, 0.014898f, 0.033376f, 0.0078212f, -0.025611f, -0.023602f,
                                      0.0081104f, 0.02644f, 0.0095624f, -0.017406f, -0.019392f, 0.0030054f, 0.018615f, 0.0089889f, -0.010151f, -0.013686f, -3.3095e-017f, 0.01099f, 0.0065239f,
                                      -0.0045899f, -0.0074634f, -0.00092909f, 0.0044961f, 0.0028979f, -0.0010614f, -0.001686f, -0.0001906f, -0.00025607f, -0.0010282f, 0.00050916f, 0.0028805f,
                                      0.0015531f, -0.0030473f, -0.0044522f, 0.00053706f, 0.0057934f, 0.0035584f, -0.0040377f, -0.0067872f, -0.00036064f, 0.0069766f, 0.0051703f, -0.0036742f,
                                      -0.0077546f, -0.0015289f, 0.0066807f, 0.0059504f, -0.002549f, -0.0073972f, -0.0024233f, 0.005378f, 0.0057399f, -0.0012487f, -0.00602f, -0.0027109f,
                                      0.0036253f, 0.0046482f, -0.00022828f, -0.0040809f, -0.0023056f, 0.0019294f, 0.0029818f, 0.00026233f, -0.0020633f, -0.0013395f, 0.00064733f, 0.0011379f,
                                      0.00019058f, -0.0003645f, -8.5936e-005f, -6.0525e-005f, -0.00050634f, -0.0003013f, 0.00077714f, 0.0011384f, -0.00022194f, -0.0016809f, -0.00097392f,
                                      0.0013031f, 0.0020648f, -4.7026e-018f, -0.0022682f, -0.0015777f, 0.0013086f, 0.0025354f, 0.00038246f, -0.0023025f, -0.0019253f, 0.00098374f, 0.0025252f,
                                      0.0007177f, -0.001931f, -0.0019327f, 0.00054298f, 0.0021255f, 0.00086754f, -0.0013545f, -0.001624f, 0.00016396f, 0.0014994f, 0.00078689f, -0.00076585f,
                                      -0.0011048f, -5.0246e-005f, 0.00082681f, 0.00051584f, -0.00030375f, -0.00051864f, -7.9722e-005f, 0.00025552f, 0.00014889f, -3.1392e-005f, -1.4365e-017f,
                                      2.9188e-005f, -0.00012871f, -0.00020536f, 5.9559e-005f, 0.00036012f, 0.00019598f, -0.00030919f, -0.00046024f, 2.5966e-005f, 0.00052983f, 0.00034068f,
                                      -0.00032453f, -0.00057301f, -5.8024e-005f, 0.00053181f
                                     };
        double y = 0;
        for (int j = 286; j >= 1; j--)
        {
            x[j] = x[j - 1];
        }
        x[0] = (float) (*(dData )) ;
        for (int i = 0; i < 287; i++)
        {
            y += x[i] * g_f50HZRatio[286 - i];
        }
        *(dData )= y;
    }
}
